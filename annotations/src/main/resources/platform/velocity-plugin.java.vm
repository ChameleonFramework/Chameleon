##
## This file is a part of the Chameleon Framework, licensed under the MIT License.
##
## Copyright (c) 2021-2023 The Chameleon Framework Authors.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
##
## Template for Velocity plugin main class.
## This template uses the Apache Velocity Template Language (VTL).
##
package $pkg;

import com.google.inject.Inject;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.plugin.annotation.DataDirectory;
import com.velocitypowered.api.proxy.ProxyServer;
import dev.hypera.chameleon.platform.velocity.VelocityChameleon;
import dev.hypera.chameleon.platform.velocity.VelocityPlugin;
import java.nio.file.Path;
import org.slf4j.Logger;

// Generated by dev.hypera.chameleon.annotations.processor.PluginAnnotationProcessor
@javax.annotation.processing.Generated("dev.hypera.chameleon.annotations.processor.PluginAnnotationProcessor")
@Plugin(
    id = "$plugin.id()",
    name = "$plugin.name()",
    version = "$plugin.version()",
    description = "$plugin.description()",
    url = "$plugin.url()",
#if($pluginAuthors.size() > 0)
    authors = {
#foreach($author in $pluginAuthors)
        "$author"#if($foreach.hasNext),#end

#end
    }#if($pluginDeps.size() > 0),#end

#end
#if($pluginDeps.size() > 0)
    dependencies = {
#foreach($dep in $pluginDeps)
        @com.velocitypowered.api.plugin.Dependency(
            id = "$dep.name",
            optional = $dep.optional
        )#if($foreach.hasNext),#end

#end
    }
#end
)
public final class $className implements VelocityPlugin {

    private final ProxyServer server;
    private final Logger logger;
    private final Path dataDirectory;
    private final VelocityChameleon chameleon;

    @Inject
    public $className(ProxyServer server, Logger logger, @DataDirectory Path dataDirectory) {
        this.server = server;
        this.logger = logger;
        this.dataDirectory = dataDirectory;
#if ($bootstrapClass.empty)
        this.chameleon = VelocityChameleon.create(${pluginClass}::new, this).load();
#else
        this.chameleon = VelocityChameleon.create(new ${bootstrapClass}(), this).load();
#end
    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent event) {
        if (this.chameleon != null) {
            this.chameleon.onEnable();
        }
    }

    @Subscribe
    public void onProxyShutdown(ProxyShutdownEvent event) {
        if (this.chameleon != null) {
            this.chameleon.onDisable();
        }
    }

    @Override
    public ProxyServer getServer() {
        return this.server;
    }

    @Override
    public Logger getLogger() {
        return this.logger;
    }

    @Override
    public Path getDataDirectory() {
        return this.dataDirectory;
    }

}
