##
## This file is a part of the Chameleon Framework, licensed under the MIT License.
##
## Copyright (c) 2021-2023 The Chameleon Framework Authors.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
##
## Template for Sponge plugin main class.
## This template uses the Apache Velocity Template Language (VTL).
##
package $pkg;

import com.google.inject.Inject;
import dev.hypera.chameleon.platform.sponge.SpongeChameleon;
import dev.hypera.chameleon.platform.sponge.SpongePlugin;
import java.nio.file.Path;
import org.apache.logging.log4j.Logger;
import org.spongepowered.api.Server;
import org.spongepowered.api.config.DefaultConfig;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.lifecycle.StartingEngineEvent;
import org.spongepowered.api.event.lifecycle.StoppingEngineEvent;
import org.spongepowered.plugin.PluginContainer;

// Generated by dev.hypera.chameleon.annotations.processor.PluginAnnotationProcessor
@javax.annotation.processing.Generated("dev.hypera.chameleon.annotations.processor.PluginAnnotationProcessor")
public final class $className implements SpongePlugin {

    private final PluginContainer pluginContainer;
    private final Logger logger;
    private @Inject @DefaultConfig(sharedRoot = false) Path dataDirectory;
    private final SpongeChameleon chameleon;

    @Inject
    public $className(PluginContainer pluginContainer, Logger logger) {
        this.pluginContainer = pluginContainer;
        this.logger = logger;
#if ($bootstrapClass.empty)
        this.chameleon = SpongeChameleon.create(${pluginClass}::new, this).load();
#else
        this.chameleon = SpongeChameleon.create(new ${bootstrapClass}(), this).load();
#end
    }

    @Listener
    public void onStartingEngineEvent(StartingEngineEvent<Server> event) {
        if (this.chameleon != null) {
            this.chameleon.onEnable();
        }
    }

    @Listener
    public void onStoppingEngineEvent(StoppingEngineEvent<Server> event) {
        if (this.chameleon != null) {
            this.chameleon.onDisable();
        }
    }

    @Override
    public PluginContainer getPluginContainer() {
        return this.pluginContainer;
    }

    @Override
    public Logger getLogger() {
        return this.logger;
    }

    @Override
    public Path getDataDirectory() {
        return this.dataDirectory;
    }

}
